#!/bin/sh
set -e

# relies on the following:
#
# awk
# cut
# which ?
# fmt ?

command_exists() {
  command -v "$@" > /dev/null 2>&1
}

get_docker_commands() {
  DOCKER_COMMANDS=()
  # XXX maybe use `which` instead?
  out=$(/usr/local/bin/docker)
  flag=0
  while read -r line; do
    if [ $flag == 1 ]; then
      comm=($line)
      comm="${comm[0]}"
      if [ "$comm" == "" ]; then
        flag=0
      else
        DOCKER_COMMANDS+=($comm)
      fi
    fi
    if [[ "$line" =~ ^Commands: ]]; then
      flag=1
    fi
  done <<< "$out"
}

read_args() {
  # no args, just print help
  if [ $# == 0 ]; then
    # docker is installed, print out docker help + warp help
    if command_exists docker; then
      (
        # testing 80 width output
        # XXX maybe use `which` instead?
        out=$(/usr/local/bin/docker)
        while read -r line; do
          echo "$line" | cut -c1-80
        done <<< "$out"
      )
    # docker is not yet installed
    else
      echo "Usage: docker [OPTIONS} COMMAND [arg...]"
      echo
      echo "This is `basename $0`, Docker is not currently installed."
      echo
      echo "Commands:"
      echo "\tinstall\t\t Install various ecosystem components including Docker"
      echo "\tuninstall\t Uninstall various ecosystem components including Docker"
      echo "\tupgrade\t\t Upgrade various ecosystem components including Docker"
      echo
      echo "Run 'docker COMMAND --help' for more information on a command."
      echo
    fi
  # there are args, do something
  else
    # if docker is installed, get native commands for wrapping
    if command_exists docker; then
      (
        # docker is installed, get native docker commands
        # check command, if native docker command, pass off
        get_docker_commands
        echo ${DOCKER_COMMANDS[@]}

        if [ -n "$1" ]
        then
          echo "Parameter #1 is $1"
        fi
      )
    # if docker is not installed, give options to install/uninstall/upgrade
    else
      echo "TODO"
    fi
  fi

  # XXX fluff notes to be removed
  if [ -n "$1" ]              # Tested variable is quoted.
  then
    echo "Parameter #1 is $1"  # Need quotes to escape #
  fi

  if [ -n "$2" ]
  then
    echo "Parameter #2 is $2"
  fi

  if [ -n "$3" ]
  then
    echo "Parameter #3 is $3"
  fi


  if [ -n "${10}" ]  # Parameters > $9 must be enclosed in {brackets}.
  then
    echo "Parameter #10 is ${10}"
  fi

  echo "-----------------------------------"
  echo "All the command-line parameters are: "$*""
  shift
  echo "All the command-line parameters are: "$*""

  echo
}

read_args $*

exit 0
