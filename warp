#!/usr/bin/env bash
set -e
trap "exit 1" TERM
export TOP_PID=$$

# relies on the following:
#
# bash > ~3, test against 4 also (do any/some derivatives work? how to test?)
# egrep (version?)
# sed
# cut
# eval (shell built-in)
# which

# potential to use for in-dev
#  awk
#  kill
#  fmt ?

version=0.1.0

command_exists() {
  command -v "$@" > /dev/null 2>&1
}

get_docker_commands() {
  DOCKER_COMMANDS=()
  out=$($(which docker))
  flag=0
  while read -r line; do
    if [ $flag == 1 ]; then
      comm=($line)
      comm="${comm[0]}"
      if [ "$comm" == "" ]; then
        flag=0
      else
        DOCKER_COMMANDS+=($comm)
      fi
    fi
    if [[ "$line" =~ ^Commands: ]]; then
      flag=1
    fi
  done <<< "$out"
}

run_native_docker() {
  if [ -n "$1" ]
  then
    docker_command=0
    for i in "${DOCKER_COMMANDS[@]}"
    do
      if [ "$i" == "$1" ] ; then
        docker_command=1
      fi
    done
  fi
  if [ "$docker_command" == 1 ]; then
    dkr_native="$(which docker) $*"
    eval $dkr_native
    kill -s TERM $TOP_PID
  else
    # XXX check against machine, compose, custom add-ins, etc.
    echo
  fi
}

warp_install_command() {
  # read in $2 to see if it is docker, machine, compose, all, etc.
  if [ -n "$2" ]; then
    comm_exists=0
    for j in "${ecosystem[@]}"
    do
      if [ $2 == "$j" ]; then
        if [[ $2 == "docker" || $2 == "all" ]]; then
          comm_exists=1
          echo "installing docker..."
          if command_exists docker; then
            echo "docker already installed, skipping..."
          else
            install_comm="$curl https://get.docker.io/ | sh"
            eval $install_comm
          fi
        fi
        if [[ $2 == "machine" || $2 == "all" ]]; then
          comm_exists=1
          echo "installing machine..."
          if command_exists docker-machine; then
            echo "machine already installed, skipping..."
          else
            echo
            # XXX
          fi
        fi
        if [[ $2 == "compose" || $2 == "all" ]]; then
          comm_exists=1
          echo "installing compose..."
          if command_exists compose; then
            echo "compose already installed, skipping..."
          else
            echo
            # XXX
          fi
        fi
        if [[ $2 == "swarm" || $2 == "all" ]]; then
          comm_exists=1
          echo "installing swarm..."
          if command_exists swarm; then
            echo "swarm already installed, skipping..."
          else
            echo
            # XXX
          fi
        fi
      fi
    done
    if [ "$comm_exists" == 0 ]; then
      # XXX show help if second arg isn't known
      echo "unknown"
    fi
  else
    # XXX show help if second arg isn't supplied
    echo "need second arg"
  fi
}

warp_uninstall_command() {
  echo
}

warp_upgrade_command() {
  echo
}

run_warp_command() {
  warp_install_commands=("install" "uninstall" "upgrade")
  ecosystem=("docker" "machine" "compose" "swarm" "all")

  # credit to https://get.docker.com/
  curl=''
  if command_exists curl; then
    curl='curl -sSL'
  elif command_exists wget; then
    curl='wget -qO-'
  elif command_exists busybox && busybox --list-modules | grep -q wget; then
    curl='busybox wget -qO-'
  fi

  if [ -n "$1" ]
  then
    for i in "${warp_install_commands[@]}"
    do
      if [ "$1" == "$i" ]; then
        if [ "$1" == "install" ]; then
          warp_install_command $*
        elif [ "$1" == "uninstall" ]; then
          warp_uninstall_command $*
        elif [ "$1" == "upgrade" ]; then
          warp_upgrade_command $*
        fi
      fi
    done
  fi
}

read_args() {
  # no args, just print help
  if [ $# == 0 ]; then
    # docker is installed, print out docker help + warp help
    if command_exists docker; then
      (
        # testing 80 width output
        out=$($(which docker))
        while read -r line; do
          echo "$line" | cut -c1-80
        done <<< "$out"
      )
    # docker is not yet installed
    else
      printf "Usage: docker [OPTIONS] COMMAND [arg...]\n\n"
      printf "This is warp, Docker is not currently installed.\n\n"
      printf "Commands:\n"
      printf "\tinstall\t\t Install various ecosystem components including Docker\n"
      printf "\tuninstall\t Uninstall various ecosystem components including Docker\n"
      printf "\tupgrade\t\t Upgrade various ecosystem components including Docker\n\n"
      printf "Run 'docker COMMAND --help' for more information on a command.\n\n"
    fi
  # there are args, do something
  else
    # if docker is installed, get native commands for wrapping
    if command_exists docker; then
      (
        # docker is installed, get native docker commands
        # check command, if native docker command, pass off
        get_docker_commands
        run_native_docker $*
      )
    fi
    run_warp_command $*
  fi

  echo
}

loadcolors() {

  export _FG_BLACK="\033[0;30m"
  export _FG_DARK_GRAY="\033[1;30m"

  export _FG_RED="\033[0;31m"
  export _FG_BRIGHT_RED="\033[1;31m"

  export _FG_GREEN="\033[0;32m"
  export _FG_BRIGHT_GREEN="\033[1;32m"

  export _FG_YELLOW="\033[0;33m"
  export _FG_BRIGHT_YELLOW="\033[1;33m"

  export _FG_BLUE="\033[0;34m"
  export _FG_BRIGHT_BLUE="\033[1;34m"

  export _FG_MAGENTA="\033[0;35m"
  export _FG_BRIGHT_MAGENTA="\033[1;35m"

  export _FG_CYAN="\033[0;36m"
  export _FG_BRIGHT_CYAN="\033[1;36m"

  export _FG_WHITE="\033[0;37m"
  export _FG_BRIGHT_WHITE="\033[1;37m"

  export _BG_BLACK="\033[40m"
  export _BG_RED="\033[41m"
  export _BG_GREEN="\033[42m"
  export _BG_YELLOW="\033[43m"
  export _BG_BLUE="\033[44m"
  export _BG_MAGENTA="\033[45m"
  export _BG_CYAN="\033[46m"
  export _BG_WHITE="\033[47m"

  export _RESET="\033[0m"

  #printf "$_FG_GREEN""$_BG_BLUE""asdf""$_RESET"

}

getrc() {

  loadcolors

  # defaults, all easily overwritten with well-formed definitions in your very own ~/.warprc
  export WARP_WIDTH=80
  export WARP_ERROR_BG=$_BG_RED
  export WARP_ERROR_FG=$_FG_BRIGHT_WHITE

  if [ -f ~/.warprc ]
  then
    $(egrep '^WARP_[A-Z0-9_]+=[A-Za-z0-9]+$' ~/.warprc | sed -e 's/^/export /')
    #env | egrep ^WARP_
  fi

}

getrc
read_args $*

exit 0
