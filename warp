#!/usr/bin/env bash
set -e
trap "exit 1" TERM
export TOP_PID=$$

# relies on the following:
#
# bash > ~3, test against 4 also (do any/some derivatives work? how to test?)
# egrep (version?)
# sed
# cut
# eval (shell built-in)
# which

# potential to use for in-dev
#  awk
#  kill
#  fmt ?

version=0.1.0

command_exists() {
  command -v "$@" > /dev/null 2>&1
}

get_docker_commands() {
  DOCKER_COMMANDS=()
  out=$($(which docker))
  flag=0
  while read -r line; do
    if [ $flag == 1 ]; then
      comm=($line)
      comm="${comm[0]}"
      if [ "$comm" == "" ]; then
        flag=0
      else
        DOCKER_COMMANDS+=($comm)
      fi
    fi
    if [[ "$line" =~ ^Commands: ]]; then
      flag=1
    fi
  done <<< "$out"
}

run_native_docker() {
  if [ -n "$1" ]
  then
    docker_command=0
    for i in "${DOCKER_COMMANDS[@]}"
    do
      if [ "$i" == "$1" ] ; then
        docker_command=1
      fi
    done
  fi
  if [ "$docker_command" == 1 ]; then
    dkr_native="$(which docker) $*"
    eval $dkr_native
    kill -s TERM $TOP_PID
  fi
}

run_install_command() {
  warp_install_commands=("install" "uninstall" "upgrade")

  # credit to https://get.docker.com/
  curl=''
  if command_exists curl; then
    curl='curl -sSL'
  elif command_exists wget; then
    curl='wget -qO-'
  elif command_exists busybox && busybox --list-modules | grep -q wget; then
    curl='busybox wget -qO-'
  fi

  if [ -n "$1" ]
  then
    for i in "${warp_install_commands[@]}"
    do
      if [ $1 == "$i" ]; then
        if [ $1 == "install" ]; then
          # XXX read in $2 to see if it is docker, machine, compose, all, etc.
          echo "installing docker..."
          install_dkr="$curl https://get.docker.io/ | sh"
          eval $install_dkr
          kill -s TERM $TOP_PID
        fi
      fi
    done
  fi
}

read_args() {
  # no args, just print help
  if [ $# == 0 ]; then
    # docker is installed, print out docker help + warp help
    if command_exists docker; then
      (
        # testing 80 width output
        out=$($(which docker))
        while read -r line; do
          echo "$line" | cut -c1-80
        done <<< "$out"
      )
    # docker is not yet installed
    else
      echo "Usage: docker [OPTIONS] COMMAND [arg...]"
      echo
      echo "This is warp, Docker is not currently installed."
      echo
      echo "Commands:"
      echo "\tinstall\t\t Install various ecosystem components including Docker"
      echo "\tuninstall\t Uninstall various ecosystem components including Docker"
      echo "\tupgrade\t\t Upgrade various ecosystem components including Docker"
      echo
      echo "Run 'docker COMMAND --help' for more information on a command."
      echo
    fi
  # there are args, do something
  else
    # if docker is installed, get native commands for wrapping
    if command_exists docker; then
      (
        # docker is installed, get native docker commands
        # check command, if native docker command, pass off
        get_docker_commands
        run_native_docker $*
      )
    # if docker is not installed, give options to install/uninstall/upgrade
    else
      run_install_command $*
    fi
  fi

  # XXX fluff notes to be removed
  if [ -n "$1" ]              # Tested variable is quoted.
  then
    echo "Parameter #1 is $1"  # Need quotes to escape #
  fi

  if [ -n "$2" ]
  then
    echo "Parameter #2 is $2"
  fi

  if [ -n "$3" ]
  then
    echo "Parameter #3 is $3"
  fi

  if [ -n "${10}" ]  # Parameters > $9 must be enclosed in {brackets}.
  then
    echo "Parameter #10 is ${10}"
  fi

  echo "-----------------------------------"
  echo "All the command-line parameters are: "$*""
  shift
  echo "All the command-line parameters are: "$*""

  echo
}

getrc() {

  # defaults, all easily overwritten with well-formed definitions in your very own ~/.warprc
  export WARP_WIDTH=80
  export WARP_ERROR_BG=RED
  export WARP_ERROR_FG=BRIGHTWHITE

  if [ -f ~/.warprc ]
  then
    $(egrep '^WARP_[A-Z0-9_]+=[A-Za-z0-9]+$' ~/.warprc | sed -e 's/^/export /')
    #env | egrep ^WARP_
  fi
}

getrc
read_args $*

exit 0
